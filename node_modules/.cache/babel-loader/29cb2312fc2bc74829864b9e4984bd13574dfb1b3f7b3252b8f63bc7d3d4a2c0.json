{"ast":null,"code":"const albumCard = function (singleSong) {\n  return `\n      <div class=\"col text-center\">\n          <img class=\"img-fluid\" src=${singleSong.album.cover_medium} alt=\"track\" />\n        <p>\n            Track: \"${`${singleSong.title}`}\"<br>\n            Artist: ${singleSong.artist.name}\n        </p>\n      </div>`;\n};\nconst fillMusicSection = async (artistName, querySelector) => {\n  try {\n    let response = await fetch('https://striveschool-api.herokuapp.com/api/deezer/search?q=' + artistName);\n    if (response.ok) {\n      let {\n        data\n      } = await response.json();\n      let musicSection = document.querySelector(querySelector);\n      for (let i = 0; i < 4; i++) {\n        musicSection.innerHTML += albumCard(data[i]);\n      }\n    } else {\n      throw new Error('Error in fetching songs');\n    }\n  } catch (err) {\n    console.log('error', err);\n  }\n};\nfillMusicSection('queen', '#rockSection');\nfillMusicSection('katyperry', '#popSection');\nfillMusicSection('eminem', '#hipHopSection');","map":{"version":3,"names":["albumCard","singleSong","album","cover_medium","title","artist","name","fillMusicSection","artistName","querySelector","response","fetch","ok","data","json","musicSection","document","i","innerHTML","Error","err","console","log"],"sources":["C:/Users/eleon/REACT/p3-react/src/index.js"],"sourcesContent":["const albumCard = function (singleSong) {\r\n  return `\r\n      <div class=\"col text-center\">\r\n          <img class=\"img-fluid\" src=${\r\n            singleSong.album.cover_medium\r\n          } alt=\"track\" />\r\n        <p>\r\n            Track: \"${`${singleSong.title}`}\"<br>\r\n            Artist: ${singleSong.artist.name}\r\n        </p>\r\n      </div>`\r\n}\r\n\r\nconst fillMusicSection = async (artistName, querySelector) => {\r\n  try {\r\n    let response = await fetch(\r\n      'https://striveschool-api.herokuapp.com/api/deezer/search?q=' + artistName\r\n    )\r\n    if (response.ok) {\r\n      let { data } = await response.json()\r\n      let musicSection = document.querySelector(querySelector)\r\n      for (let i = 0; i < 4; i++) {\r\n        musicSection.innerHTML += albumCard(data[i])\r\n      }\r\n    } else {\r\n      throw new Error('Error in fetching songs')\r\n    }\r\n  } catch (err) {\r\n    console.log('error', err)\r\n  }\r\n}\r\n\r\nfillMusicSection('queen', '#rockSection')\r\nfillMusicSection('katyperry', '#popSection')\r\nfillMusicSection('eminem', '#hipHopSection')\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,SAAAA,CAAUC,UAAU,EAAE;EACtC,OAAO;AACT;AACA,uCACYA,UAAU,CAACC,KAAK,CAACC,YAAY;AACzC;AACA,sBACsB,GAAGF,UAAU,CAACG,KAAK,EAAE;AAC3C,sBAAsBH,UAAU,CAACI,MAAM,CAACC,IAAI;AAC5C;AACA,aAAa;AACb,CAAC;AAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,UAAU,EAAEC,aAAa,KAAK;EAC5D,IAAI;IACF,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CACxB,6DAA6D,GAAGH,UAClE,CAAC;IACD,IAAIE,QAAQ,CAACE,EAAE,EAAE;MACf,IAAI;QAAEC;MAAK,CAAC,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACpC,IAAIC,YAAY,GAAGC,QAAQ,CAACP,aAAa,CAACA,aAAa,CAAC;MACxD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BF,YAAY,CAACG,SAAS,IAAIlB,SAAS,CAACa,IAAI,CAACI,CAAC,CAAC,CAAC;MAC9C;IACF,CAAC,MAAM;MACL,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC;EAC3B;AACF,CAAC;AAEDb,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC;AACzCA,gBAAgB,CAAC,WAAW,EAAE,aAAa,CAAC;AAC5CA,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}